<!--
  
  Well, well, well. A prospective employer who views‐source on my résumé? That’s an amusing oddity, to say
  the least. Even if you’re not planning to hire me, I’d appreciate it if you’d drop me an e-mail:
  <me@ell.io> — I’d love to have a chat with any recruiter that … conscious!
  
  Oh yeah, also: enjoy the markup. <span class="smiley">;)</span>
  
-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>elliottcable’s résumé</title>
    <link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" type="text/html;charset=utf-8"/>
    
    <!-- For the purposes of load-times, I serialized a few external resources into this document directly. -->
    <!-- <link rel="stylesheet" type="text/css;charset=utf-8"
           href="http://resources.yreality.net/Design/960/reset.css"/> -->
    <style type="text/css">
      <![CDATA[
        html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,font,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td{margin:0;padding:0;border:0;outline:0;font-size:100%;vertical-align:baseline;background:transparent}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}:focus{outline:0}ins{text-decoration:none}del{text-decoration:line-through}table{border-collapse:collapse;border-spacing:0}
      ]]>
    </style>
    <!-- <link rel="stylesheet" type="text/css"
           href="http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:extralight,bold"/> -->
    <!-- <link rel="stylesheet" type="text/css"
           href="http://fonts.googleapis.com/css?family=Tangerine:regular,bold"/> -->
    <style type="text/css">
      <![CDATA[
        @font-face {
          font-family: 'Yanone Kaffeesatz';
          font-style: normal;
          font-weight: 200;
          src: local('Yanone Kaffeesatz'), url('http://themes.googleusercontent.com/font?kit=We_iSDqttE3etzfdfhuPRWdYuNb9i97qInNKPYJgRwg') format('truetype'); }
        @font-face {
          font-family: 'Yanone Kaffeesatz';
          font-style: normal;
          font-weight: 700;
          src: local('Yanone Kaffeesatz'), url('http://themes.googleusercontent.com/font?kit=We_iSDqttE3etzfdfhuPRQL07A8tpHrkwi7BQtnqF-Q') format('truetype'); }
        @font-face {
          font-family: 'Tangerine';
          font-style: normal;
          font-weight: bold;
          src: local('Tangerine'), url('http://themes.googleusercontent.com/font?kit=UkFsr-RwJB_d2l9fIWsx3vesZW2xOQ-xsNqO47m55DA') format('truetype'); }
        @font-face {
          font-family: 'Tangerine';
          font-style: normal;
          font-weight: normal;
          src: local('Tangerine'), url('http://themes.googleusercontent.com/font?kit=_jMq7r9ahcBZZjpP8hftNA') format('truetype'); }
      ]]>
    </style>
    
    <style>
      <![CDATA[
        /* ========
        = General =
        =========*/
        
        body {
          font: 300 14pt/1.55 "Helvetica", sans-serif;
          text-rendering: optimizeLegibility;
          -webkit-font-smoothing: antialiased;
        }
        
        /* ### Inline textual elements */
        
        /* This is horribly broken. I can’t make `rgba()`s inside `a:visited` and `a` work properly in WebKit!
           Hence, I’m using a screencap’d, hardcoded, colour… instead of the appropriate colour with an alpha. */
        a {
          padding: 0.1em 0.25em 0.1em 0.25em;
          margin: 0px -0.25em 0px -0.25em;
          
          border: 0px solid rgba(0, 0, 0, 0.15);
          border-width: 0.15em 0px;
          -webkit-border-radius: 3px;
             -moz-border-radius: 3px;
                  border-radius: 3px;
          
          text-decoration: none;
          color: inherit;
        }
        a:hover { border-color: #000000; background-color: rgba(0, 0, 0, 0.75); color: #C0B2FF; }
        
        em { font-style: normal; }
        *:not(em) > em {
          padding: 0.1em 0.25em 0.1em 0.25em;
          margin: 0px -0.25em 0px -0.25em;
          
          -webkit-border-radius: 3px;
             -moz-border-radius: 3px;
                  border-radius: 3px;
          
          background-color: rgba(255, 255, 0, 0.25);
        }
        em em { font-weight: 600; }
        strong { font-weight: 900; }
        
        /* ### Structural elements */
        
        body > div:not(:first-of-type) {
          padding-top: 1em;
          margin-top: 49em;
        }
        
        body > div:not(:first-of-type) > section:first-child {
          border-top: 0.666em solid rgba(0, 0, 0, 0.666);
        }
        
        section {
          padding: 1.25em 2.5em;
          margin: 1.5em -2.5em;
          
          background-color: rgba(255, 255, 255, 0.5);
        }
        
        section > p:not(:last-child) {
          margin-bottom: 1em;
        }
        
        h1, h2, h3, h4 { font-family: "Yanone Kaffeesatz", "Helvetica", sans-serif; }
        h1 { font-size: 350%; line-height: 1.0; }
        h2 { font-size: 175%; line-height: 1.0; }
        h3 { font-size: 125%; line-height: 1.0; }
        h4 { font-size: 105%; line-height: 1.0; }
        
        /* =========
        = Specific =
        ==========*/
        
        html { height: 100%; background: #E0E0E0; }
        body {
          width: 35em;
          margin: auto;
          
          padding: 0em 0.917em;
          
          border-left: 0.666em solid rgba(0, 0, 0, 0.05);
          -webkit-border-top-left-radius: 7.50em;
          -moz-border-radius-topleft: 7.50em;
        }
        
        /* ### Page’s primary title */
        #title { margin: 2.5em 0px; margin-right: -8em; }
        #title > * { display: inline; }
        #title > h1 { font-family: "Helvetica", sans-serif; }
        #title > #subtitle {
          padding-left: 0.333em;
          padding-right: 0.5em; /* To avoid clipping the exclamation point */
          
          font-family: "Tangerine", serif;
          font-size: 225%;
          
          opacity: 0.5;
        }
        
        /* ### Section headers */
        section > header {
          padding: 0em 0.917em;
          margin: 0em -1.583em;
          margin-bottom: 1em;
          
          border-left: 0.666em solid rgba(0, 0, 0, 0.75);
        }
        
        /* ### Sections */
        section, section > ul li { -webkit-transition: opacity 0.333s ease, border-left-color 0.25s ease; }
        section.irrelevant:not(:hover), section > ul li.irrelevant:not(:hover) { opacity: 0.05; }
        
        /* ### Next jumps */
        .next > a       { color: rgba(0, 0, 0, 0.333); background: none; border: none; line-height: 1.0; }
        .next > a:hover { color: rgba(0, 0, 0, 0.9); }
        
        /* To make this lay on top of the border in every browser, and across all sizes of text, I preform some
           interesting trickery: I place the actual link in a bounding-box of normal font-size, and then utilize
           em units to perfectly align that bounding-box on top of the border. Then, when I align the text to
           the center of the bounding box, it is guaranteed to lie directly on top of the border. */
        body > .next {
          display: block;
          width: 5em;
          margin-left: -3.70em;
          
          text-align: center;
        }
        body > .next > a { font-size: 250%; }
        
        /* ### List focus */
        nav#focus {
          width: 35em;
          padding: 0px 2.5em;
          margin: 0px -2.5em;
          
          background-color: rgba(0, 0, 0, 0.666); -webkit-transition: background-color 0.333s ease;
          color: white;
          text-align: center;
        }
        nav#focus > * { font-size: 75%; line-height: 1.3; }
        
        nav#focus.docked { position: fixed; top: 0px; z-index: 1000; }
        nav#focus.docked:hover { background: #444444; }
        
        nav#focus > *:before { content: "Select an area of focus: "; font-weight: 600; }
        nav#focus > ul, nav#focus > ul li { display: inline; }
        nav#focus > ul li:not(:nth-last-child(1)):not(:nth-last-child(2)):after { content: ","; }
        
        nav#focus > ul li:nth-last-child(2):before { content: "or "; }
        nav#focus > ul li:nth-last-child(1):before { content: "/ "; }
        
        aside#topics {
          float: right;
          width: 7em;
          padding: 0.5em;
          margin: 1em;
          margin-right: -8em;
          
          background: #E0E0E0;
          
          border-left: 0.333em solid rgba(0, 0, 0, 0.05);
          
          text-align: left;
        }
        aside#topics:empty { visibility: hidden; }
        aside#topics > * { font-size: 75%; }
        aside#topics > ul:before { content: "Topics:"; display: block; margin-bottom: 0.5em; font-weight: 900; }
        
        aside#topics li { padding: 0.1em 0px; }
        aside#topics li strong:after            { content: ","; }
        aside#topics li strong:last-child:after { content: ""; }
        aside#topics li strong { opacity: 0.5; }
        aside#topics li strong, section > ul li > span strong {
          padding: 0.1em 0.2em 0.1em 0.2em;
          margin: 0px -0.2em 0px -0.2em;
          
          border: 1px solid rgba(0, 0, 0, 0.1);
          -webkit-border-radius: 3px;
             -moz-border-radius: 3px;
                  border-radius: 3px;
        }
        
        /* ### Lists */
        section > ul:not(:first-child) { margin-top: 1em; }
        section > ul:not(:last-child)  { margin-bottom: 1em; }
        
        section > ul li {
          padding: 0px 2.542em;
          margin: 0.5em -1.375em;
          
          border-left: 0.25em solid rgba(0, 0, 0, 0.125);
        }
        section > ul li:hover { border-left-color: rgba(0, 0, 0, 0.5); }
        section > ul li > span { display: block; }
        
        section > ul li.mastery     > span:before { content: "Mastery of "; }
        section > ul li.familiarity > span:before { content: "Familiarity with "; }
        section > ul li.competency  > span:before { content: "Competency with "; }
        
        section > ul li > p { padding-left: 1em; font-size: 75%; }
      ]]>
    </style>
    <script type="text/javascript">
      <![CDATA[
        if(typeof xmlNS === 'undefined') {
          var xmlNS = document.lastChild.namespaceURI };
        if(typeof _gaq === 'undefined') { _gaq = new(Array) };
        
        _gaq.push(['_setAccount', "UA-5294724-1"]);
        _gaq.push(['_trackPageview']);
        
        (function() {
          var ga = document.createElementNS(xmlNS, 'script');
          ga.type = "text/javascript"; ga.async = true;
          ga.src = "http://www.google-analytics.com/ga.js";
          
          document.getElementsByTagNameNS(xmlNS, 'head')[0].appendChild(ga);
        })();
      ]]>
    </script>
    <script type="text/javascript">
      <![CDATA[
        /*
         * classList.js: Implements a cross-browser element.classList getter.
         * 2010-2-14
         *
         * By Eli Grey, http://eligrey.com
         * Public Domain.
         * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
         */
        "use strict";
        if (typeof Element !== "undefined") {
        (function () {
        var classListProp = "classList";
        if (!Element.prototype.hasOwnProperty(classListProp)) {
            var trim = /^\s+|\s+$/g,
            setClasses = function (elem, classes) {
                elem.className = classes.join(" ");
            },
            checkAndGetIndex = function (classes, token) {
                if (token === "") {
                    throw "SYNTAX_ERR";
                }
                if (/\s/.test(token)) {
                    throw "INVALID_CHARACTER_ERR";
                }

                return classes.indexOf(token);
            },
            classListGetter = function () {
                var elem = this,
                classes  = elem.className.replace(trim, "").split(/\s+/);
                return {
                    length: classes.length,
                    item: function (i) {
                        return classes[i] || null;
                    },
                    contains: function (token) {
                        return checkAndGetIndex(classes, token) !== -1;
                    },
                    add: function (token) {
                        if (checkAndGetIndex(classes, token) === -1) {
                            classes.push(token);
                            this.length = classes.length;
                            setClasses(elem, classes);
                        }
                    },
                    remove: function (token) {
                        var index = checkAndGetIndex(classes, token);
                        if (index !== -1) {
                            classes.splice(index, 1);
                            this.length = classes.length;
                            setClasses(elem, classes);
                        }
                    },
                    toggle: function (token) {
                        if (checkAndGetIndex(classes, token) === -1) {
                            this.add(token);
                        } else {
                            this.remove(token);
                        }
                    },
                    toString: function () {
                        return elem.className;
                    }
                };
            };

            if (Object.defineProperty) {
                Object.defineProperty(Element.prototype, classListProp, { get: classListGetter, enumerable: true });
            } else if (Object.prototype.__defineGetter__) {
                Element.prototype.__defineGetter__(classListProp, classListGetter);
            }
        }
        }());
        }
      ]]>
    </script>
    <script type="text/javascript">
      <![CDATA[
        focusTopic = function (kind) {
          var topics = document.querySelector("#topics"),
                list =   topics.querySelector("ul"),
             newList = document.createElementNS(document.documentElement.getAttribute("xmlns"), "ul")
          
          Array.prototype.forEach.call( document.querySelectorAll("#skills > section > ul li.mastery."+kind+", "+
                                                                  "#skills > section > ul li.familiarity."+kind),
            function (element) {
              var elementCopy = document.importNode(element.querySelector("span strong"), true),
                     listItem = document.createElementNS(document.documentElement.getAttribute("xmlns"), "li")
              
               newList.appendChild(listItem)
              listItem.appendChild(elementCopy)
            })
          
          if (list) topics.removeChild(list)
          topics.appendChild(newList)
          
          Array.prototype.forEach.call(document.querySelectorAll("#skills > section > ul li."+kind),
            function (element) { element.classList.remove("irrelevant") })
          Array.prototype.forEach.call(document.querySelectorAll("#skills > section > ul li:not(."+kind+")"),
            function (element) { element.classList.add("irrelevant") })
          
          /* This is buggy in a necessary way. `Element.classList().length` is 1, even for elements with *no*
             classes; there is nothing I can do about that. An unfortunate sideeffect is that `section`s with
             only one class will never be marked as ‘irrelevant’—so I have to ensure all `section`s have at least
             two topic-classes. */
          Array.prototype.forEach.call(document.querySelectorAll("#portfolio > section."+kind),
            function (section) { if (section.classList.length > 1) section.classList.remove("irrelevant") })
          Array.prototype.forEach.call(document.querySelectorAll("#portfolio > section:not(."+kind+")"),
            function (section) { if (section.classList.length > 1) section.classList.add("irrelevant") })
        }
        
        window.onload = function(){
          var focusNav = document.querySelector('nav#focus'),
         afterFocusNav = document.querySelector('nav#focus + *'),
                margin = window.getComputedStyle(afterFocusNav, null).getPropertyValue('margin-top'),
              position = focusNav.offsetTop
          
          window.onscroll = function(){
            if (!(focusNav.classList && focusNav.classList.contains("docked")) &&
                (focusNav.offsetTop - document.querySelector('body').scrollTop < 0)) {
              afterFocusNav.style.marginTop = "4.5em" // FIXME: This should pull the old value out, and increment
              focusNav.classList.add("docked") }
            else if ((focusNav.classList && focusNav.classList.contains("docked")) &&
                     document.querySelector('body').scrollTop <= position) {
              afterFocusNav.style.marginTop = margin
              focusNav.classList.remove("docked") }
          }
          
        }
      ]]>
    </script>
  </head>
  <body>
    <header id="title">
      <h1>Elliott Cable</h1>
      <div id="subtitle">… sourcerer <strong>extraordinaire</strong>!</div>
    </header>
    <div id="objective">
      <section>
        <p>
          Elliott is interested in providing the connective glue necessary within every team. His wide areas of
          interest imply that he can “speak the language” of many and varied technical fields. He'll be useful
          anywhere there are <em>new things to be created</em>. <span class="smiley">:)</span>
        </p>
        <p>Click the <span class="next"><a href="#skills">↓</a></span> to begin!</p>
      </section>
    </div><span class="next"><a href="#skills">↓</a></span>
    <div id="skills">
      <section>
        <header><h2>What I’ll Bring to Your Team</h2></header>
        <p>
          I’m familiar with <em><em>quite</em> a lot</em> of tools, programming languages, systems, and frameworks.
          To be honest, I’m a little obsessive about learning new things; so I’ve done my best to keep this section
          as short and relevant as possible. That is, however, a lofty goal, given how much I
          know… so please, keep an open mind! <span class="smiley">;)</span>
        </p>
        <p>(Use the focus bar below to reduce the deluge of content.)</p>
      </section>
      <nav id="focus"><ul>
        <li><a href="" onclick="focusTopic('design'); return false;">design</a></li>
        <li><a href="" onclick="focusTopic('architecture'); return false;">architecture</a></li>
        <li><a href="" onclick="focusTopic('admin'); return false;">administration</a></li>
        <li><a href="" onclick="focusTopic('desktop'); return false;">desktop</a></li>
        <li><a href="" onclick="focusTopic('web'); return false;">web development</a></li>
      </ul></nav>
      <section>
        <aside id="topics"></aside>
        <p>
          When all is said and done, I’m primarily a developer: I love to <em>create things</em>, write tools and
          applications that change how people interact with their computers and each‐other; if it ticks, I want to
          know why, and then make it tick better.
        </p>
        <ul>
          <li class="architecture web mastery"><span><strong>API design</strong> and abstractive programming techniques</span>
            <p>
              I’ve written <a href="http://github.com/elliottcable/repositories">hundreds of distinct libraries</a>
              in more languages than I can count. I tend to abstract everything into portable libraries; it
              enables code reuse (upon which I heavily depend for my productivity.)
            </p>
          </li>
          <li class="architecture web desktop mastery"><span><strong><abbr title="behaviour-driven development">BDD</abbr></strong> techniques</span></li>
          <li class="architecture web admin mastery"><span><strong><a href="http://www.ruby-lang.org/en" title="Ruby Programming Language">Ruby</a></strong></span></li>
          <li class="web competency"><span><strong><a href="http://rubyonrails.org/" title="Ruby on Rails">Ruby on Rails</a></strong> and other Ruby web frameworks</span></li>
          <li class="architecture admin mastery"><span>plain <strong>C</strong></span></li>
          <li class="architecture admin competency"><span><strong>C++</strong></span></li>
          <li class="architecture web design mastery"><span><strong>JavaScript</strong></span></li>
          <li class="architecture web familiarity"><span><strong><a href="http://nodejs.org/" title="node.js">node.js</a></strong></span>
            <p>
              I’ve <a href="http://github.com/ry/node/commit/52f088b">been in on</a> the node.js party since the
              very beginning. The moment I started digging into it, I knew it, and things like it, was the future
              of web development. Asynchronicity is where it’s at! <span class="smiley">:D</span>
            </p>
          </li>
          <li class="architecture web admin mastery"><span><strong><a href="http://git-scm.com/" title="Git - Fast Version Control System">git</a></strong>, granular commit strategies, branch‐driven development</span></li>
          <li class="architecture web admin familiarity"><span><strong><a href="http://subversion.tigris.org/" title="subversion.tigris.org">Subversion</a></strong></span></li>
          <li class="web admin competency"><span>traditional <a href="http://www.postgresql.org/" title="PostgreSQL: The world's most advanced open source database">relational <strong>databases</strong></a></span></li>
          <li class="web admin familiarity"><span>exotic backend technologies (such as <strong><a href="http://code.google.com/p/redis/" title="redis - Project Hosting on Google Code">Redis</a></strong>)</span>
            <p>
              Redis is another technology that quickly caught my eye. I expect to find many wonderful uses for
              this tool in quite a diverse array of projects; I find it plays especially well with Node.js.
            </p>
          </li>
          <li class="architecture admin desktop familiarity"><span><strong>Objective-C</strong></span></li>
          <li class="desktop competency"><span><strong><a href="http://developer.apple.com/cocoa/" title="Cocoa">Cocoa</a></strong> and Xcode</span></li>
          <li class="architecture admin desktop mastery"><span><strong><a href="http://www.apple.com/macosx/technology/" title="Apple - Mac OS X - New technologies in Snow Leopard">Mac OS X</a></strong> and its BSD subsystems</span>
            <p>
              I’ve been using OS X and Apple’s hardware for half a decade, and I’ve always had a <em>hacker’s
              spirit</em>. There’s really not a lot that I don’t know about them, anymore.
            </p>
          </li>
          <li class="architecture admin desktop mastery"><span>Linux systems (primarily <strong><a href="http://archlinux.org/" title="Arch Linux">Arch Linux</a></strong>, <a href="http://www.centos.org/" title="www.centos.org - The Community ENTerprise Operating System">CentOS</a>) and UNIX philosophies</span>
            <p>
              While I’m an OS X devotee, a properly tuned and maintained Linux system can easily be just as
              beautiful. I love to create and maintain such systems.
            </p>
          </li>
          <li class="web admin mastery"><span><strong><a href="http://aws.amazon.com/ec2/" title="Amazon Elastic Compute Cloud (Amazon EC2)">Amazon EC2</a></strong>’s APIs</span>
            <p>
              Cloud computing (all silly buzz aside) <em>really is the future</em>; and Amazon was, essentially,
              there first (at least, on that sort of large scale.) I’ve been using them since 2007, and tend to
              work ephemeral cloud‐based instances into aspects of many of my tasks and projects.
            </p>
          </li>
          <li class="admin mastery"><span><strong>sysadmin tools</strong> (SSH, vim, top, sed/AWK)</span></li>
          <li class="architecture admin familiarity"><span><strong>shell scripting</strong> techniques (<a href="http://www.zsh.org/" title="Zsh">zsh</a>, bash)</span></li>
        </ul>
      </section>
      <section>
        <p>
          While I may be a programmer, I still have quite a taste for clean, minimalist design. There’s a reason
          I use <a href="http://apple.com/macbookpro" title="Apple - MacBook Pro">Apple’s computers</a> and
          software, despite my comprehensive knowledge of more ‘true’ UNIX systems. My design skills will bring a
          touch of elegance to your development project that may otherwise be lacking; a feel for <em>putting the
          <em>user’s experience</em> first</em>… whether that ‘user’ be a visitor to your website, or a developer
          applying your APIs to some task.
        </p>
        <ul>
          <li class="web design mastery"><span><strong><a href="http://diveintohtml5.org/" title="Dive Into HTML 5">HTML5</a></strong> and associated technologies</span></li>
          <li class="web design mastery"><span><strong><a href="http://www.w3.org/TR/html5/the-xhtml-syntax.html" title="9 The XHTML syntax &#8212; HTML5">XHTML5</a></strong> with <strong>SVG</strong></span>
            <p>
              Yes, I realize that ‘XHTML5’ is simply HTML5 serialized as XML. I feel that the distinction is,
              however, fairly important. I believe nesting SVG and XHTML offers some of the most interesting
              design solutions we’ve seen in the last decade.
            </p>
          </li>
          <li class="design mastery"><span><strong><a href="http://www.w3.org/Style/CSS/current-work" title="CSS: Current Work">CSS3</a></strong></span></li>
          <li class="web design familiarity"><span>the <strong><a href="http://haml-lang.com/" title="#haml">HAML</a></strong> dynamic‐markup system</span></li>
          <li class="design mastery"><span>the <strong><a href="http://lesscss.org/" title="LESS - Leaner CSS">LESS</a></strong> and <strong><a href="http://sass-lang.com/" title="Sass - Syntactically Awesome Stylesheets">SASS</a></strong> CSS pre‐compilers</span></li>
          <li class="web design competency"><span><strong><a href="http://mootools.net/" title="MooTools - a compact javascript framework">MooTools</a></strong>, <strong><a href="http://jquery.com/" title="jQuery: The Write Less, Do More, JavaScript Library">jQuery</a></strong>, and other client‐side JavaScript frameworks</span></li>
          <li class="web design familiarity"><span>modern dynamic‐HTML techniques, the <strong>DOM</strong>, and “<strong>AJAX</strong>”</span></li>
          <li class="design mastery"><span><strong>minimalism</strong> and <strong>precision design</strong> theory</span></li>
          <li class="design"><span>Obsession with <strong>typography</strong> and <strong>negative space</strong></span>
            <p>
              I love beautiful type. I find it extremely gratifying to see a page that one’s eyes can just… drink
              in; a page begging to be absorbed. Honestly put, I believe typography to be the <em>single most
              important element</em> of any design; after all, ‘content is king,’ right?
            </p>
          </li>
        </ul>
      </section>
    </div><span class="next"><a href="#portfolio">↓</a></span>
    <div id="portfolio">
      <section>
        <header><h2>Portfolio</h2></header>
        <p>
          I create things. I create a <strong>lot</strong> of things. I produce tons of designs, and I write an
          unbelievably large quantity of code. I <a href="http://tau.pe/16522397951">recently rang it up</a>:
          approximately as of this writing, among the 23 most laterally‐active of my ~100 repositories, I had
          nearly <em><em>100,000 lines</em> of impact</em>, across around <em><em>2,000 commits</em></em>.
        </p>
        <p>Seriously. That’s a lot of code.</p>
        <p>
          In addition to that, I don’t write a lot of code I dislike: I’m an extreme perfectionist, possibly even
          OCD in my devotion to creating beautiful code; thus, I found it very difficult to select a reasonably
          small selection of examples of my work. I <strong>strongly</strong> encourage you to peruse the rest of
          my <a href="http://github.com/elliottcable" title="elliottcable's Profile - GitHub">public GitHub repositories</a>,
          if only because I’m extremely proud of most of the things presented there.
        </p>
        <p>
          <em>That having been said</em>… the following are a few of my most interesting or impressive
          creations; I anticipate them providing you with a clear overview of my style, abilities, and tastes,
          as they pertain to programming and design.
        </p>
      </section>
      <section class="architecture web">
        <header><h3><a href="http://github.com/elliottcable/Paws.o">Paws.o</a> and <a href="http://github.com/elliottcable/Paws.js">Paws.js</a></h3></header>
        <p>
          My latest and most ambitions open‐source project to date, Paws, is a new sort of programming language,
          designed from the ground up with an eye for heavily distributed codebases oriented towards the web.
          It’s massively concurrent, and extremely friendly towards asynchronicity; heavily inspired by
          JavaScript/<a href="http://nodejs.org/" title="node.js">node.js</a> in spirit, as well as
          <a href="http://www.ruby-lang.org/en" title="Ruby Programming Language">Ruby</a> and
          <a href="http://iolanguage.com/" title="io">Io</a> in style.
        </p>
        <p>
          This particular project has broadened my ANSI C horizons farther than I ever expected to take them. As
          some mad hybrid between a designer and a developer, I wouldn’t have predicted myself delving this deep
          into “The Stack;” however, it’s been a fortunate turn of events, as I’ve discovered a deep love for C
          itself, as well as designing and developing low‐level systems’ architecture.
        </p>
        <ul>
          <li><code>Paws.o</code> — <code><a href="http://github.com/elliottcable/Paws.o/blob/Master/Source/Paws.o/Paws.c#L32-94">/Source/Paws.o/Paws.c</a></code>
            <p>
              As usual, I’m heavy on the conceptual documentation; I love to explain *why* I’ve structured some
              part of the code the way I did, in hopes that some reader will learn something useful from the
              sweat and love I poured into creating that structure.
            </p>
          </li>
          <li><code>Paws.o</code> — <code><a href="http://github.com/elliottcable/Paws.o/blob/Master/Source/Paws.o/Types/list/list.c#L17-47">/Source/Paws.o/Types/list/list.c</a></code>
            <p>
              This is the declaration of one of Paws’ most basic datatypes, <code>infrastructure list</code>.
              This particular snippet demonstrates my fairly unique style of C, revolving around
              <code>struct</code>s of function pointers to namespace “methods” relating to a specific datatype,
              and pointers to <code>struct</code>s as the datatypes themselves. This also happens to exhibit my
              proclivity towards abusing C’s preprocessor to modify the code.
            </p>
          </li>
          <li><code>Paws.o</code> — <code><a href="http://github.com/elliottcable/Paws.o/blob/Master/Source/Paws.o/Types/Types.h#L29-53">/Source/Paws.o/Types/Types.h</a></code>
            <p>
              Another very unique element of my approach to large C projects; this is Paws’ <code>thing</code>
              <code>struct</code>. It’s, essentially, an annotated pointer type, created to allow me to pass
              around pointers to any of Paws’ core datatypes, without caring <strong>which</strong> datatype
              we’re passing around. This is exactly the sort of system I absolutely love to engineer.
            </p>
          </li>
          <li><code>Paws.o</code> — <code><a href="http://github.com/elliottcable/Paws.o/blob/Master/Source/Paws.o/Ancillary/Magazine/Magazine.c#L106-135">/Source/Paws.o/Ancillary/Magazine/Magazine.c</a></code>
            <p>
              Some more meaty implementation source‐code, to counterbalance the declarations exhibited above.
              This is one of the most inherently gnarly pieces of code in the Paws codebase as of this writing;
              as such, I put quite a bit of work into making the implementation as absolutely clear as possible
              to offset the inherent complexity of that system.
            </p>
          </li>
          <li><code>Paws.o</code> — <code><a href="http://github.com/elliottcable/Paws.o/blob/Master/Source/Paws.o/Ancillary/Threading/Pool/Pool.c#L91-117">/Source/Paws.o/Ancillary/Threading/Pool/Pool.c</a> and <a href="http://github.com/elliottcable/Paws.o/blob/Master/Source/Paws.o/Ancillary/Threading/Thread/Thread.c#L97-175">/Source/Paws.o/Ancillary/Threading/Thread/Thread.c</a></code>
            <p>
              These files reveal my tendency to massively re‐wrap any library which has an API I dislike; here, I
              created a completely unique internal threading API (implemented as <code>Pool</code> and
              <code>Thread</code>) to abstract away the (as I consider it, anyway) absolutely terrible
              <code>pthread.h</code> API.
            </p>
          </li>
          <li><code>Paws.js</code> — <code><a href="http://github.com/elliottcable/Paws.js/blob/Master/Packages/Paws.js/Things/list.js#L17-29">/Packages/Paws.js/Things/list.js</a></code>
            <p>
              The first example from the <code>Paws.js</code> codebase; this codebase is slowly starting to age,
              as I’ve been focusing quite intensively on abstract Paws design and the <code>Paws.o</code>
              implementation; however, there’s still plenty of good code in here. This snippet applies closures
              and prototypal inheritance to positive effect, wrapping some data unique to a specific descendant
              of the prototype object. It evidences my tendency to prefer to play to a language’s strengths,
              rather than simply fall back to what I know: in this case, JavaScript’s prototypal inheritance
              system is quite beautiful, and I use that to my advantage instead of relying upon a classist
              abstraction.
            </p>
          </li>
          <li><code>Paws.js</code> — <code><a href="http://github.com/elliottcable/Paws.js/blob/Master/Packages/Paws.js/Things/list.js#L133-162">/Packages/Paws.js/Things/list.js</a></code>
            <p>
              Another snippet exhibiting copious description of the reasoning behind an implementation prior to
              the implementation itself.
            </p>
          </li>
        </ul>
      </section>
      <section class="architecture web">
        <header><h3><a href="http://github.com/elliottcable/Speck">Speck</a>, <a href="http://github.com/elliottcable/Spark">Spark</a>, and <a href="http://github.com/elliottcable/Slack">Slack</a></h3></header>
        <p>
          Another one of my very ambitious and interesting projects; I found that none of the testing or code
          specification systems out there really facilitated the way I liked to develop. Specifically, they
          required too much additional documentation of the operation of your code, when I felt that <em>the code
            should be documenting itself</em>. This implementation was for Ruby, and involved a trio (or a
            quartet, depending on how you look at it) of separate projects.
        </p>
        <p>
          This project really exhibits my taste for modularization; the core system itself was spread across only
          two individual classes and files; all extraneous functionality was added to other libraries that
          extended the core library.
        </p>
        <ul>
          <li>Speck — <code><a href="http://github.com/elliottcable/Speck/blob/master/lib/speck/check.rb#L26-40">/lib/speck/check.rb</a></code>
            <p>
              The majority of the meat of Speck’s implementation fits into these ~10 LoC. This piece of code is
              quite exemplar of my programming style within Ruby; short, succinct. Nothing beyond what is
              necessary.
            </p>
          </li>
          <li>Speck — <code><a href="http://github.com/elliottcable/Speck/blob/master/specifications/speck/check_specs.rb#L29-49">/specifications/speck/check_specs.rb</a></code>
            <p>
              A testament to its flexibility, I tested and specified Speck entirely, utilizing only the tools
              provided within Speck itself.
            </p>
          </li>
          <li>Slack — <code><a href="http://github.com/elliottcable/Slack/blob/master/lib/slack/mixins/object.rb#L20-23">/lib/slack/mixins/object.rb</a></code></li>
        </ul>
      </section>
      <section class="design web admin">
        <header><h3><a href="http://tau.pe">http://tau.pe</a> (<a href="http://github.com/elliottcable/taupe">source</a>)</h3></header>
        <p>
          One of my smallest and most interesting projects; this was the <em>first thing I actually made</em>
          with node.js; it’s a simple and uniquely semantic short‐URL service for Twitter statuses.
        </p>
        <ul>
          <li><code><a href="http://github.com/elliottcable/taupe/blob/master/server.js#L13-46">/server.js</a></code>
            <p>
              The entire server / application is only ~75 LoC; it ties into a Redis database to store and
              retrieve tweet IDs and their respective owners. It then 301‐redirects that URL to the relevant
              tweet on <a href="http://twitter.com/">http://twitter.com/</a>.
            </p>
          </li>
        </ul>
      </section>
      <section class="architecture desktop">
        <header><h3><a href="http://github.com/elliottcable/Yarn">Yarn</a> and <a href="http://github.com/elliottcable/Percival">Percival</a></h3></header>
        <p>
          I created this pair of projects to allow me to intricately introspect JavaScript objects from node.js
          at the command‐line. Yarn provides an <strong>extremely</strong> robust styled‐string printer that
          utilizes ANSI escape codes to style output on the command line, while Percival is responsible for
          actually introspecting JavaScript objects and datatypes, and turning them into Yarns for display.
        </p>
        <ul>
          <li>Yarn — <code><a href="http://github.com/elliottcable/Yarn/blob/Master/lib/Yarn.js#L2-20">/lib/Yarn.js</a></code>
            <p>
              A very quintessential piece of my JavaScript; almost all of my libraries follow this basic form. I
              rely on the prototypal nature of JavaScript to do my work for me, and focus on implementing the
              aspects of my interfaces that I want to expose to the library’s user.
            </p>
          </li>
          <li>Percival — <code><a href="http://github.com/elliottcable/Percival/blob/Master/lib/Percival.js#L29-47">/lib/Percival.js</a></code>
            <p>
              This is the core of Percival’s functionality; it allows me to extend Percival with custom ‘lenses’
              for any imaginable custom JavaScript object. I also bundle in ‘lenses’ for each of JavaScript’s
              core datatypes. Yet again, presenting evidence to support my obsession with abstraction.
            </p>
          </li>
        </ul>
      </section>
      <section class="architecture admin desktop">
        <header><h3><a href="http://github.com/elliottcable/ArchLinux-AMIs">ArchLinux AMIs</a></h3></header>
        <p>
          A huge array of shell scripts, that work together with the Amazon EC2 APIs to remotely construct and
          package up “AMIs” (Amazon Machine Images), built using my favourite ultra‐elegant and clean Linux
          distribution: Arch Linux.
        </p>
        <ul>
          <li><code><a href="http://github.com/elliottcable/ArchLinux-AMIs/blob/master/bundle.sh">/bundle.sh</a></code>
            <p>
              This is a single massive shell script that manages the host systems (instances) utilized during the
              construction process. Other shell scripts from the project are executed by this script, remotely,
              on those hosts, to preform the actual system construction and bundling. Far from the prettiest code
              I’ve ever written, but what do you expect out of a shell script this monolithic and complex?
              <span class="smiley">:]</span>
            </p>
          </li>
        </ul>
      </section>
      <section class="architecture desktop">
        <header><h3><code><a href="http://github.com/elliottcable/it/blob/master/lib/it/environmented_proc.rb">EnvironmentedProc</a></code> and <code><a href="http://github.com/elliottcable/lobby">Lobby</a></code></h3></header>
        <p>
          These are some of the oddest, most tricky, and interesting Ruby code I’ve ever written; I feel it’s
          fairly important to include them here, as they expose my taste for curious and unusual hackery.
        </p>
        <ul>
          <li><code><a href="http://github.com/elliottcable/it/blob/master/lib/it/environmented_proc.rb">environmented_proc.rb</a></code>
            <p>
              This is quite possibly the single most useful, yet small, pieces of Ruby code I’ve ever written.
              As with several of the above examples, the trickiness of the code is directly proportional to the
              quantity of documentation / explanation I provide; in this case, well over half of the document is
              explanatory material.
            </p>
          </li>
          <li><code><a href="http://github.com/elliottcable/lobby/blob/master/lib/lobby.rb">lobby.rb</a></code></li>
        </ul>
      </section>
    </div><span class="next"><a href="#history">↓</a></span>
    <div id="history">
      <section id="miscellaneous">
        <header><h2>Curriculum vitæ</h2></header>
        <p>
          While these aren’t exactly capable of fitting into either of the above categories, I feel they are
          relevant enough to merit inclusion. They give you an idea of <em>who I am</em>, which is critical to
          understanding whether or not I’m a match for your team.
        </p>
        <ul>
          <li>Born and raised in <strong>Anchorage, Alaska</strong></li>
          <li>Trained as a classical <strong>pianist</strong></li>
          <li>Attained rank of <strong>Eagle Scout</strong> in the Boy Scouts of America</li>
          <li>Retains a taste and talent for <strong>photography</strong></li>
        </ul>
      </section>
      <section id="employment">
        <ul>
          <li>Self‐employed, <strong>Audio Video eXpress Workshops</strong>, 2002–2006</li>
          <li>Self‐employed, <strong>ecable</strong>, 2005–2010</li>
          <li>Entrepreneur, <strong><a href="http://yreality.net/" title="yreality?">yreality</a></strong>, 2003–present</li>
        </ul>
      </section>
      <section id="education">
        <ul>
          <li><strong>University of Alaska, Anchorage</strong>, Spring 2007—Spring 2009</li>
          <li><strong>Montana State University</strong>, Fall 2006</li>
          <li><strong>Grace Christian High School</strong>, Fall 2001—Spring 2006</li>
        </ul>
      </section>
    </div><span class="next"><a href="#closing">↓</a></span>
    <div id="closing">
      <section>
        <p>
          So! You’ve read what I can do… why don’t you tell me what you want me to <em>make for you</em>?
          I’m available for contract work, while simultaneously interested in longer‐term employment opportunities
          (if you’ve the room for a <em>little bit of extra <a
            href="http://search.twitter.com/search?q=from:elliottcable+%23awesome">#awesome</a></em>
          on your team!)
        </p>
        <p>You can e‐mail me any time: <a href="mailto:me+resume@ell.io">me@ell.io</a></p>
      </section>
    </div>
  </body>
</html>
